import java.util.*;
import java.text.DecimalFormat;

class Client {
    private String clientId;
    private ArrayList<Account> accounts;

    public Client(String clientId) {
        this.clientId = clientId;
        this.accounts = new ArrayList<>();
    }

    public void addAccount(Account acc) {
        accounts.add(acc);
    }

    public ArrayList<Account> getAccounts() {
        return accounts;
    }

    public String getClientId() {
        return clientId;
    }

    @Override
    public String toString() {
        StringBuilder result = new StringBuilder(clientId + " [");
        for (Account acc : accounts) {
            result.append(acc.getId()).append(", ");
        }
        result.delete(result.length() - 2, result.length()); 
        result.append("]\n");
        return result.toString();
    }
}

abstract class Account {
    protected double balance;
    private static int nextAccountId = 0;
    protected int accId;
    protected String clientId;
    protected String typeId;

    public Account(String clientId, String typeId) {
        this.accId = nextAccountId++;
        this.clientId = clientId;
        this.typeId = typeId;
        this.balance = 0.0;
    }

    public void deposit(double value) {
        balance += value;
    }

    public void withdraw(double value) {
        if (balance >= value) {
            balance -= value;
        } else {
            System.out.println("fail: saldo insuficiente");
        }
    }

    public void transfer(Account other, double value) {
        if (balance >= value) {
            this.withdraw(value);
            other.deposit(value);
        } else {
            System.out.println("fail: saldo insuficiente");
        }
    }

    @Override
    public String toString() {
        DecimalFormat d = new DecimalFormat("0.00");
        return accId + ":" + clientId + ":" + d.format(balance) + ":" + typeId + "\n";
    }

    public double getBalance() {
        return balance;
    }

    public int getId() {
        return accId;
    }

    public String getClientId() {
        return clientId;
    }

    public String getTypeId() {
        return typeId;
    }

    public abstract void updateMonthly();
}

class CheckingAccount extends Account {
    private static final double monthlyFee = 20.0;

    public CheckingAccount(String clientId) {
        super(clientId, "CC");
    }

    public void updateMonthly() {
        withdraw(monthlyFee);
    }
}

class SavingsAccount extends Account {
    private static final double monthlyInterest = 0.01;

    public SavingsAccount(String clientId) {
        super(clientId, "CP");
    }

    public void updateMonthly() {
        deposit(getBalance() * monthlyInterest);
    }
}

class Agency {
    private Map<Integer, Account> accounts;
    private Map<String, Client> clients;

    public Agency() {
        this.accounts = new HashMap<>();
        this.clients = new LinkedHashMap<>();
    }

    public void addClient(String clientId) {
        Client client = new Client(clientId);
        clients.put(clientId, client);

        CheckingAccount checkingAccount = new CheckingAccount(clientId);
        SavingsAccount savingsAccount = new SavingsAccount(clientId);

        accounts.put(checkingAccount.getId(), checkingAccount);
        accounts.put(savingsAccount.getId(), savingsAccount);

        client.addAccount(checkingAccount);
        client.addAccount(savingsAccount);
    }

    public void deposit(int accId, double value) {
        Account acc = getAccount(accId);
        if (acc != null) {
            acc.deposit(value);
        }
    }

    public void withdraw(int accId, double value) {
        Account acc = getAccount(accId);
        if (acc != null) {
            acc.withdraw(value);
        }
    }

    public void transfer(int fromAccId, int toAccId, double value) {
        Account fromAcc = getAccount(fromAccId);
        Account toAcc = getAccount(toAccId);

        if (fromAcc != null && toAcc != null) {
            fromAcc.transfer(toAcc, value);
        }
    }

    public void updateMonthly() {
        for (Account acc : accounts.values()) {
            acc.updateMonthly();
        }
    }

    private Account getAccount(int accountId) {
        if (accounts.containsKey(accountId)) {
            return accounts.get(accountId);
        } else {
            System.out.println("fail: conta nao encontrada");
            return null;
        }
    }

    @Override
    public String toString() {
        StringBuilder s = new StringBuilder("- Clients\n");
        for (Client client : this.clients.values()) {
            s.append(client.toString());
        }
        s.append("- Accounts\n");
        for (Account acc : this.accounts.values()) {
            s.append(acc.toString());
        }
        return s.toString();
    }
}

public class Solver {
    public static void main(String[] arg) {
        Agency agency = new Agency();

        while (true) {
            String line = input();
            println("$" + line);
            String[] args = line.split(" ");

            try {
                if      (args[0].equals("end"))       { break; }
                else if (args[0].equals("show"))      { print(agency); }
                else if (args[0].equals("addCli"))    { agency.addClient(args[1]); }
                else if (args[0].equals("deposito"))  { agency.deposit((int) number(args[1]), number(args[2])); }
                else if (args[0].equals("saque"))     { agency.withdraw((int) number(args[1]), number(args[2])); }
                else if (args[0].equals("transf"))    { agency.transfer((int) number(args[1]), (int) number(args[2]), number(args[3])); }
                else if (args[0].equals("update"))    { agency.updateMonthly(); }
                else                                { println("fail: comando invalido"); }
            } catch (Exception e) {
                println(e.getMessage());
            }
        }
    }

    private static Scanner scanner = new Scanner(System.in);
    private static String input()                { return scanner.nextLine();        }
    private static double number(String value)   { return Double.parseDouble(value); }
    public static void println(Object value)      { System.out.println(value);        }
    public static void print(Object value)        { System.out.print(value);          }
}
